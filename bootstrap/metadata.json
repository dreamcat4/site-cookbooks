{
  "version": "0.1.0",
  "attributes": {

  },
  "suggestions": {

  },
  "license": "Apache 2.0",
  "maintainer_email": "cookbooks@opscode.com",
  "conflicting": {

  },
  "dependencies": {
    "nanite": [

    ],
    "stompserver": [

    ],
    "runit": [

    ],
    "couchdb": [

    ],
    "apache2": [

    ],
    "rabbitmq": [

    ]
  },
  "providing": {
    "bootstrap": [

    ],
    "bootstrap::client": [

    ],
    "bootstrap::server": [

    ]
  },
  "description": "Configures RubyGems-installed Chef",
  "replacing": {

  },
  "recipes": {
    "bootstrap": "",
    "bootstrap::client": "",
    "bootstrap::server": ""
  },
  "groupings": {

  },
  "long_description": "= WARNING, INSTRUCTIONS HEAVILY MODIFIED FOR OS-X\n= WARNING, YES, RLY!!\nThis is an alpha (or pre-alpha even) version of a bootstrap for Chef 0.8.0, which is also in a alpha release. Unless you're ready to solve perplexing bugs and deal with general alpha-release issues, stick to the GA 0.7.x series.\n\n= DESCRIPTION:\n\nThis cookbook bootstraps a Chef client or server when Chef is installed via RubyGems. If installing Chef from OS distribution packages, please see the 'chef' cookbook. \n\n== Platform:\n\nServer bootstrap is tested on Ubuntu 9.10, 9.04, 8.10 and 8.04, Debian 5.0.\n\nClient bootstrap is tested on the above, plus CentOS 5.3, Fedora 10, OpenBSD 4.6, FreeBSD 7.1 and Gentoo. OpenSolaris 11 is also tested, but there\u2019s a bug in Ohai that requires some manual intervention (OHAI-122).\n\n== Installing chef-0.8a\n\n1. Set your hostname!\n\n'hostname -f' should return an FQDN (fully-qualified domain name) including a dot and a subdomain. For example 'localhost.localdomain' or 'localhost.local'. So your /etc/hosts file might look like this:\n\n\t# the ordering of hostname aliases seems to matter. Use hostname -f to test\n\t127.0.0.1 localhost.localdomain chef.localdomain chef localhost\n\t255.255.255.255\tbroadcasthost\n\t::1 localhost.localdomain chef.localdomain chef localhost\n\tfe80::1%lo0\tlocalhost\n\n\n== Install ruby\n\nYou may not wish to use the stock Matz ruby (MRI) 1.8.7p72 that come with Snow Leopard.\n\n* So Either \n\ta) Install REE 1.8.6 or \n\tb) 1.9.1p243+ is recommended\n\n* Note - currently chef-0.8a isnt compatible with any ruby1.9.\n  But for future please consider ruby 1.9.1 as generally its faster than REE.\n\n=== Install base rubygems\n\n\tsudo port install rb-rubygems\n\techo \"gem: --no-rdoc --no-ri\"\" >> $HOME/.gemrc\n\tgem install gemcutter && gem tumble\n\tgem install github\n\tgem sources --add http://gems.opscode.com\n\n=== Install git\n\n=== Install chef0.8a gems\n\nChef 0.8 isn't officially available from Rubygems yet. The command would be\n\n\tgem install chef chef-server chef-client chef-solr\n\nWe can install the chef gems from source instead\n\n\tgem install <gem deps ???>\n\tgit clone git://github.com/opscode/chef.git\n\tcd chef && sudo rake install\n\n=== Checkout chef-repo (on development machine)\n\n\tgithub fork opscode/chef-repo\n\tgit clone git@github.com:$USER/chef-repo.git\n\tsudo mkdir /srv && sudo ln -s $PWD/chef-repo /srv/chef\n\nPopulate cookbooks and site-cookbooks. Its better to use git submodules for this.\n\n\tcd chef-repo\n\trm -Rf cookbooks site-cookbooks\n\tgit clone git://github.com/opscode/cookbooks.git\n\t\n\tgithub fork opscode/site-cookbooks\n\tgit clone git@github.com:$USER/site-cookbooks.git site-cookbooks\n\t# you may develop your own cookbooks repo in site-cookbooks\n\n\n=== Backup\n\nAt this point its generally worthwhile to take a Disk Image. Ie just prior to running the bootstrap command. This way you can re-image other machines and use the prepped image for either server or client node(s). Depending upon your IT infrastructure, the backup may be through one of several methods. Personally I prefer either VirtualBox/VMWare Disk images, or RackSpace 'Cloud Servers' disk images. Amazon Web Services (AWS) also has a good solution which is used by Opscode here.\n\n=== Run chef-solo with bootstrap files\n\nAt the moment these files are in the bootstrap cookbook. I'd ideally like to see them move to the official opscode chef-repo/config directory instead.\n\n\tcd /srv/chef/site-cookbooks/bootstrap/files/default/\n\t# may be otherwise: cd /srv/chef/config\n\t\n\t# maybe chef-solo should allow cmd-line options for querying and setting the attributes here?\n\t# it would need to query the bottstrap attributes in some knife-esp manner. Wishful thinking.\n\nThe chef-solo command takes 2 arguments:\n\n\tchef-solo -c config.rb -j chef.json\n\nYou configure the chef-solo program with solo.rb. But seperately you set the attributes for your chef installation in the .json file. Chef-solo will then run the bootstrap recipie from the cookbooks directory with the attributes you have selected.\n\n\t# Clients:\n\tsudo chef-solo -c solo.rb -j bootstrap-client.json\n\n\t# Servers:\n\tsudo chef-solo -c solo.rb -j bootstrap-server.json\n\nRemember to set your hostname first!\n\n'hostname -f' should return an FQDN (fully-qualified domain name) including a dot and a subdomain. For example 'localhost.localdomain' or 'localhost.local'. If you are tunneling your connections over ssh, then a localhost domain should be fine. Your /etc/hosts file might look like this:\n\n\t# the ordering of hostname aliases seems to matter. Use hostname -f to test\n\t127.0.0.1 localhost.localdomain chef.localdomain chef localhost\n\t255.255.255.255\tbroadcasthost\n\t::1 localhost.localdomain chef.localdomain chef localhost\n\tfe80::1%lo0\tlocalhost\n\n\n=== What happens next...\n\nThe client bootstrap recipie will:\n\n* Install chef configuration files into /etc/chef/\n* Generate validation token,certificates,keys and put them in /etc/chef\n\nPlus the chef-server bootstrap will:\n\n* Patch couchdb plist file\n* Install these runtime dependancies:\n\tcouchdb\n\terlang\n\trabbitmq-server\n* Configure nanite with rabbitmq\n\nIts then a case of performing the same bootstrap proceedure again on new client node, and registering that node to the already-running chef-server. In other words, the chef-server is like your control centre. A proper client bootstrap *should* (in theory) then power up the chef-client as a background service. And automatically register itself to the server the first run (downloading recipies, roles, runlist whatever). We believe that it should be possible to provision nodes anonymously to one of a set of pre-defined roles. (eg webserver, data server, proxy/loadbalancer/gateway). Node attributes can then be set in json (or though knife / chef api) and used to globally configure service roles.\n\n= LICENSE and AUTHOR:\n\nAuthor:: Dreamcat Four <dreamcat4@gmail.com>\nAuthor:: Joshua Timberman <joshua@opscode.com>\nAuthor:: Joshua Sierles <joshua@37signals.com>\n\nCopyright 2008-2009, Opscode, Inc\nCopyright 2009, 37signals\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\n",
  "name": "bootstrap",
  "recommendations": {

  },
  "platforms": {
    "openbsd": [

    ],
    "debian": [

    ],
    "fedora": [

    ],
    "centos": [

    ],
    "mac_os_x": [

    ],
    "freebsd": [

    ],
    "ubuntu": [

    ],
    "redhat": [

    ]
  },
  "maintainer": "Opscode, Inc."
}