= DESCRIPTION:

This cookbook bootstraps a Chef client or server when Chef is installed via RubyGems. If installing Chef from OS distribution packages, please see the 'chef' cookbook. 

= Installing chef-0.8a

1. Set your hostname!
   'hostname -f' should return an FQDN (fully-qualified domain name) including a dot and a subdomain. For example 'localhost.localdomain' or 'localhost.local'. So your /etc/hosts file might look like this:
	# the ordering of hostname aliases seems to matter. Use hostname -f to test
	127.0.0.1 localhost.localdomain chef.localdomain chef localhost
	255.255.255.255	broadcasthost
	::1 localhost.localdomain chef.localdomain chef localhost
	fe80::1%lo0	localhost
2. Install ruby
   You may not wish to use the stock ruby that comes with your OS.
   * Note - currently chef-0.8a isnt compatible with ruby1.9 and there may be the odd issue with 1.8.7. This is primarily because chef is developed by people running Ruby Enterprise Edition (REE). Oh well.
   * Either 
	a) Install REE 1.8.6 or
	b) Ruby 1.9.1p243+ (not supported yet)
3. Install rubygems
4. Install git-core

= Install the chef-0.8.0 ruby gems

Chef 0.8 isn't officially available from a Rubygems repository yet. But the command would be;

	gem install chef chef-server chef-client chef-solr

We can clone chef from github instead. Then install it with the rake task.

	gem install <gem deps ???>
	git clone git://github.com/opscode/chef.git
	cd chef && sudo rake install

= Checkout chef-repo

On development machine

	github fork opscode/chef-repo
	git clone git@github.com:$USER/chef-repo.git
	sudo mkdir /srv && sudo ln -s $PWD/chef-repo /srv/chef

Populate cookbooks and site-cookbooks. Its better to use git submodules for this.

	cd chef-repo
	rm -Rf cookbooks site-cookbooks
	git clone git://github.com/opscode/cookbooks.git
	
	github fork opscode/site-cookbooks
	git clone git@github.com:$USER/site-cookbooks.git site-cookbooks
	# you may develop your own cookbooks repo in site-cookbooks


= Backup

At this point its generally worthwhile to take a Disk Image. Ie just prior to running the bootstrap command. This way you can re-image other machines and use the prepped image for either server or client node(s). Depending upon your IT infrastructure, the backup may be through one of several methods. Personally I prefer either VirtualBox/VMWare Disk images, or RackSpace 'Cloud Servers' disk images. Amazon Web Services (AWS) also has a good solution which is used by Opscode here.

= Run the bootstrap

At the moment these files are in the bootstrap cookbook. I'd ideally like to see them move to the official opscode chef-repo/config directory instead.

	cd /srv/chef/site-cookbooks/bootstrap/files/default/
	# may be otherwise: cd /srv/chef/config
	
	# maybe chef-solo should allow cmd-line options for querying and setting the attributes here?
	# it would need to query the bottstrap attributes in some knife-esp manner. Wishful thinking.

The chef-solo command takes 2 arguments:

	chef-solo -c config.rb -j chef.json

You configure the chef-solo program with solo.rb. But seperately you set the attributes for your chef installation in the .json file. Chef-solo will then run the bootstrap recipie from the cookbooks directory with the attributes you have selected.

	# Clients:
	sudo chef-solo -c solo.rb -j bootstrap-client.json

	# Servers:
	sudo chef-solo -c solo.rb -j bootstrap-server.json

=== Remember to set hostname first!

'hostname -f' should return an FQDN (fully-qualified domain name) including a dot and a subdomain. For example 'localhost.localdomain' or 'localhost.local'. If you are tunneling your connections over ssh, then a localhost domain should be fine. Your /etc/hosts file might look like this:

	# the ordering of hostname aliases seems to matter. Use hostname -f to test
	127.0.0.1 localhost.localdomain chef.localdomain chef localhost
	255.255.255.255	broadcasthost
	::1 localhost.localdomain chef.localdomain chef localhost
	fe80::1%lo0	localhost


== Bootstrap will...

The client bootstrap recipie will:

* Install chef configuration files into /etc/chef/
* Generate validation token,certificates,keys and put them in /etc/chef

Plus the chef-server bootstrap will:

* Patch couchdb plist file
* Install these runtime dependancies:
	couchdb
	erlang
	rabbitmq-server
* Configure nanite with rabbitmq

== 0.8 installed! What next?

Chef 0.8 has a simple user account type of authentication model. Each authorized chef user is known as a `chef client`. And is accessible through the new `Clients` tab in the webui interface. In the chef authentication model, the chef-server holds the public key for the account, and *you* (or the remote client program) hold the private rsa signing key. You sign API requests to the server with your private key. When they reach the server they are checked against the corresponding public key. This is stored in couchdb as a list of registered clients. So in this model we can have groups of users (either real people or other kinds of chef programs) all sharing the same private key. Or individual users each with their own unique key.

= Setup Knife

We need to sort out the client access keys and set up our knife command line tool.

* Booting up the chef-server should create a system admin account called `chef-webui`. By default you should not need to touch these settings.
	Chef::Config[:web_ui_client_name] = "chef-webui"
	Chef::Config[:web_ui_key] = "/etc/chef/webui.pem"

* The chef-server bootup code will also create the file `/etc/chef/webui.pem`. Webui.pem is a 2048bit rsa private key. You will need this file for the next command so copy it to your local filesystem if your workstation / administration machine is different from the chef-server machine.
	sudo ls -lsa /etc/chef/webui.pem

* Create a seperate account for the `knife` commandline tool. We will use the webui rsa key account to do this. Just the first time we use knife, we shall use sudo.
	# Create a new admin client called `knife`
	sudo OPSCODE_USER="chef-webui" OPSCODE_KEY=/etc/chef/webui.pem \
	knife create_client --client=knife --key=$HOME/.ssh/knife.pem --admin
	sudo chown $USER ~/.ssh/knife.pem
	chmod 600 ~/.ssh/knife.pem

* Now add the following lines to your ~/.profile or ~/.barshrc
	# Opscode knife
	export OPSCODE_USER="knife"
	export OPSCODE_KEY=$HOME/.ssh/knife.pem

* Restart the terminal or `source ~/.profile`. From now on we do not need to use `sudo` anymore to invoke knife. And we may create further client accounts if required. For example to create a client account called `owphy` we would:
	knife create_client --client=owphy --key=/home/owphy/.ssh/owphy.pem --admin

* Use `knife --help` to see all the other possible commanline options.

NOTE:
* Don't use or alter the validation account `chef-validator`. Its a special system account and may not be suitable for general api access.
* There are situations where the keypair can be re-generated in chef-server. So the `client.pem` stored on disk can become out of sync with the server's public key. This issue appears as an Authorization failure.
* If you create a non-admin account, then requests from that account may also be rejected with very similar looking `Unauthorized` messages. Don't forget to specify the `--admin` flag to specify if you do want to an administration account. (the default is false).
* If the client account is not recognised or deleted, then trying to access the chef-server will return a similar `authorization rejected` exception / failure.
* In those circumstances its usually best just to start from scratch and re-create the broken accounts.

=== What next?

Its then a case of performing the same bootstrap proceedure again on new client node, and registering that node to the already-running chef-server. In other words, the chef-server is like your control centre. A proper client bootstrap *should* (in theory) then power up the chef-client as a background service. And automatically register itself to the server the first run (downloading recipies, roles, runlist whatever). We believe that it should be possible to provision nodes anonymously to one of a set of pre-defined roles. (eg webserver, data server, proxy/loadbalancer/gateway). Node attributes can then be set in json (or though knife / chef api) and used to globally configure service roles.

= LICENSE and AUTHOR:

Author:: Dreamcat Four <dreamcat4@gmail.com>
Author:: Joshua Timberman <joshua@opscode.com>
Author:: Joshua Sierles <joshua@37signals.com>

Copyright 2008-2009, Opscode, Inc
Copyright 2009, 37signals

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
