= WARNING, INSTRUCTIONS HEAVILY MODIFIED FOR OS-X
= WARNING, YES, RLY!!
This is an alpha (or pre-alpha even) version of a bootstrap for Chef 0.8.0, which is also in a alpha release. Unless you're ready to solve perplexing bugs and deal with general alpha-release issues, stick to the GA 0.7.x series.

= DESCRIPTION:

This cookbook bootstraps a Chef client or server when Chef is installed via RubyGems. If installing Chef from OS distribution packages, please see the 'chef' cookbook. 

== Platform:

Chef bootstrap is untested on Snow Leopard 10.6.2 and Snow Leopard Server. Use at your own risk! We recommend launching an instance of OS-X 10.6 Server from a clean VMWare Disk Image. This requires Mac Hardware and either VMWare Fusion or Parallels virtualization software. Sun's VirtualBox may also eventually support OS-X Server.

== Installing chef-0.8 on mac os-x

1. Set your hostname!

'hostname -f' should return an FQDN (fully-qualified domain name) including a dot and a subdomain. For example 'localhost.localdomain' or 'localhost.local'. So your /etc/hosts file might look like this:

	# the ordering of hostname aliases seems to matter. Use hostname -f to test
	127.0.0.1 localhost.localdomain chef.localdomain chef localhost
	255.255.255.255	broadcasthost
	::1 localhost.localdomain chef.localdomain chef localhost
	fe80::1%lo0	localhost

=== Install git from macports

	sudo port install git-core +bash_completion +doc +svn

=== Install chef0.8a gems

Chef 0.8 isn't officially available from Rubygems yet. The command would be

	gem install chef chef-server chef-client chef-solr

We can install the chef gems from source instead

	gem install <gem deps ???>
	git clone git://github.com/opscode/chef.git
	cd chef && sudo rake install

=== Checkout chef-repo (on development machine)

	github fork opscode/chef-repo
	git clone git@github.com:$USER/chef-repo.git
	sudo mkdir /srv && sudo ln -s $PWD/chef-repo /srv/chef

Populate cookbooks and site-cookbooks. Its better to use git submodules for this.

	cd chef-repo
	rm -Rf cookbooks site-cookbooks
	git clone git://github.com/opscode/cookbooks.git
	
	# This repo contains the Mac - OSX cookbooks !!
	github fork dreamcat4/site-cookbooks
	git clone git@github.com:$USER/site-cookbooks.git site-cookbooks
	# you may develop your own cookbooks repo in site-cookbooks


=== Backup

At this point its generally worthwhile to take a Disk Image. Ie just prior to running the bootstrap command. This way you can re-image other machines and use the prepped image for either server or client node(s). Depending upon your IT infrastructure, the backup may be through one of several methods. Personally I prefer either VirtualBox/VMWare Disk images, or RackSpace 'Cloud Servers' disk images. Amazon Web Services (AWS) also has a good solution which is used by Opscode here.

=== Run chef-solo with bootstrap files

At the moment these files are in the osx bootstrap cookbooks. I'd ideally like to see them move to the official opscode chef-repo/config directory instead.

	cd /srv/chef/site-cookbooks/bootstrap/files/mac_os_x/
	# may be otherwise: cd /srv/chef/config

	# maybe chef-solo should allow cmd-line options for querying and setting the attributes here?
	# it would need to query the bottstrap attributes in some knife-esp manner. Wishful thinking.

The chef-solo command takes 2 arguments:

	chef-solo -c config.rb -j chef.json

You configure the chef-solo program with solo.rb. But seperately you set the attributes for your chef installation in the .json file. Chef-solo will then run the bootstrap recipie from the cookbooks directory with the attributes you have selected.

	# Clients:
	sudo chef-solo -c solo.rb -j bootstrap-client.json

	# Servers:
	sudo chef-solo -c solo.rb -j bootstrap-server.json

Remember to set your hostname first!

'hostname -f' should return an FQDN (fully-qualified domain name) including a dot and a subdomain. For example 'localhost.localdomain' or 'localhost.local'. If you are tunneling your connections over ssh, then a localhost domain should be fine. Your /etc/hosts file might look like this:

	# the ordering of hostname aliases seems to matter. Use hostname -f to test
	127.0.0.1 localhost.localdomain chef.localdomain chef localhost
	255.255.255.255	broadcasthost
	::1 localhost.localdomain chef.localdomain chef localhost
	fe80::1%lo0	localhost


=== What happens next...

The client bootstrap recipie will:

* Patch macports base to enable persistent launchd services across reboots
* Install chef configuration files into /etc/chef/
* Generate validation token,certificates,keys and put them in /etc/chef

Plus the chef-server bootstrap will:

* Patch couchdb plist file
* Install these runtime dependancies from macports:
	couchdb
	erlang
	rabbitmq-server
* Configure nanite with rabbitmq
* #not_complete_yet#Install and launch the chef-server with launchd / unicorn / nginx

Its then a case of performing the same bootstrap proceedure again on new client node, and registering that node to the already-running chef-server. In other words, the chef-server is like your control centre. A proper client bootstrap *should* (in theory) then power up the chef-client as a background service. And automatically register itself to the server the first run (downloading recipies, roles, runlist whatever). We believe that it should be possible to provision nodes anonymously to one of a set of pre-defined roles. (eg webserver, data server, proxy/loadbalancer/gateway). Node attributes can then be set in json (or though knife / chef api) and used to globally configure service roles.

= LICENSE and AUTHOR:

Author:: Dreamcat Four <dreamcat4@gmail.com>
Author:: Joshua Timberman <joshua@opscode.com>
Author:: Joshua Sierles <joshua@37signals.com>

Copyright 2008-2009, Opscode, Inc
Copyright 2009, 37signals

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
